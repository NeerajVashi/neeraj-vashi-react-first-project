{"ast":null,"code":"export function showAuthors() {\n  return function (dispatch) {\n    const myRequest = 'http://localhost:3001/author';\n    fetch(myRequest).then(response => response.json()).then(allAuthor => {\n      dispatch({\n        type: 'changeAuthors',\n        payload: allAuthor\n      });\n    });\n  };\n}\nexport function logout() {\n  return function (dispatch) {\n    dispatch({\n      type: 'logout',\n      payload: {}\n    });\n  };\n}\nexport function login(user) {\n  return function (dispatch) {\n    const loginRequest = 'http://localhost:3002/login';\n    fetch(loginRequest, {\n      headers: {\n        Accept: 'application/json',\n        'Content-type': 'application/json'\n      },\n      method: 'post',\n      body: JSON.stringify(user)\n    }).then(response => {\n      // console.log('token', response)\n      return response.json();\n    }).then(isLogin => {\n      // console.log('isLogin', isLogin)\n      if (isLogin.status) {\n        dispatch({\n          type: 'login',\n          payload: isLogin\n        });\n      }\n    });\n  };\n}\nexport function showBooks() {\n  return function (dispatch) {\n    const myRequest = 'http://localhost:3001/book';\n    fetch(myRequest).then(response => response.json()).then(allBooks => {\n      dispatch({\n        type: 'changeBooks',\n        payload: allBooks\n      });\n    });\n  };\n}\nexport function addBooks(newBook) {\n  return function (dispatch) {\n    const insertBookRequest = 'http://localhost:3001/book/insert';\n    fetch(insertBookRequest, {\n      headers: {\n        Accept: 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: newBook\n    }).then(addBook => {\n      dispatch({\n        type: 'addBook',\n        payload: newBook\n      });\n    });\n  };\n}\nexport function addAuthors(newAuthor) {\n  return function (dispatch) {\n    const insertAuthorRequest = 'http://localhost:3001/author/insert';\n    fetch(insertAuthorRequest, {\n      headers: {\n        Accept: 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: newAuthor\n    }).then(addBook => {\n      dispatch({\n        type: 'addAuthor',\n        payload: newAuthor\n      });\n    });\n  };\n}\nexport function deleteBook(id) {\n  return function (dispatch) {\n    const deleteBookRequest = \"http://localhost:3001/book/delete/\".concat(id);\n    fetch(deleteBookRequest, {\n      headers: {\n        Accept: 'application/json, text/plain, */*',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      method: 'delete'\n    }).then(deleteBook => {\n      dispatch({\n        type: 'deleteBook',\n        payload: id\n      });\n    });\n  };\n}\nexport function deleteAuthor(id) {\n  return function (dispatch) {\n    const deleteBookRequest = \"http://localhost:3001/author/delete/\".concat(id);\n    fetch(deleteBookRequest, {\n      headers: {\n        Accept: 'application/json, text/plain, */*',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      method: 'delete'\n    }).then(deleteAuthor => {\n      dispatch({\n        type: 'deleteAuthor',\n        payload: id\n      });\n    });\n  };\n}\nexport function updateAuthor(id, newauthordata) {\n  return function (dispatch) {\n    const insertAuthorRequest = \"http://localhost:3001/author/update/\".concat(id);\n    fetch(insertAuthorRequest, {\n      headers: {\n        Accept: 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      method: 'put',\n      body: JSON.stringify(newauthordata)\n    }).then(updateAuthor => {\n      dispatch({\n        type: 'updateAuthor',\n        payload: newauthordata\n      });\n    });\n  };\n}\nexport function updateBook(id, newBookData) {\n  return function (dispatch) {\n    const bookRequest = \"http://localhost:3001/book/update/\".concat(id);\n    fetch(bookRequest, {\n      headers: {\n        Accept: 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      method: 'put',\n      body: JSON.stringify(newBookData)\n    }).then(updateBook => {\n      dispatch({\n        type: 'updateBook',\n        payload: newBookData\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/home/ethen/Desktop/09-neeraj-vashistha-redux-project/src/actions/libraryAction.js"],"names":["showAuthors","dispatch","myRequest","fetch","then","response","json","allAuthor","type","payload","logout","login","user","loginRequest","headers","Accept","method","body","JSON","stringify","isLogin","status","showBooks","allBooks","addBooks","newBook","insertBookRequest","addBook","addAuthors","newAuthor","insertAuthorRequest","deleteBook","id","deleteBookRequest","deleteAuthor","updateAuthor","newauthordata","updateBook","newBookData","bookRequest"],"mappings":"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","sourcesContent":["\nexport  function showAuthors() {\n    return function(dispatch) {\n        const myRequest = 'http://localhost:3001/author';\n        fetch(myRequest).then(response => response.json())\n            .then((allAuthor) => {\n                dispatch({type:'changeAuthors', payload:allAuthor})\n            })\n }\n}\nexport function logout() {\n    return function(dispatch) {\n     dispatch({type:'logout', payload:{}})\n} \n}\nexport  function login(user) {\n    return function(dispatch) {\n        const loginRequest = 'http://localhost:3002/login';\n        fetch(loginRequest, {\n            headers: {\n                Accept:'application/json',\n                'Content-type': 'application/json',\n            },\n            method:'post',\n            body: JSON.stringify(user),\n        }).then(response => { \n            // console.log('token', response)\n            return response.json()\n        })\n        .then((isLogin) => {\n            // console.log('isLogin', isLogin)\n            if(isLogin.status){\n                dispatch({type:'login', payload:isLogin})\n            }\n        })\n }\n}\nexport function showBooks() {\n    return function(dispatch) {\n        const myRequest = 'http://localhost:3001/book';\n        fetch(myRequest).then(response => response.json())\n            .then((allBooks) => {\n                dispatch({type:'changeBooks', payload:allBooks})\n            })\n }\n}\nexport function addBooks(newBook){\n    return function(dispatch) {\n        const insertBookRequest = 'http://localhost:3001/book/insert';\n        fetch(insertBookRequest, {\n            headers: {\n              Accept: 'application/json, text/plain, */*',\n              'Content-Type': 'application/json',\n            },\n            method: 'post',\n            body: newBook,\n          }).then((addBook) => {\n                dispatch({type:'addBook', payload:newBook})\n            })\n }\n}\n\nexport function addAuthors(newAuthor){\n    return function(dispatch) {\n        const insertAuthorRequest = 'http://localhost:3001/author/insert';\n        fetch(insertAuthorRequest, {\n          headers: {\n            Accept: 'application/json, text/plain, */*',\n            'Content-Type': 'application/json',\n          },\n          method: 'post',\n          body: newAuthor,\n        }).then((addBook) => {\n                dispatch({type:'addAuthor', payload:newAuthor})\n            })\n }\n}\n\nexport  function  deleteBook(id) {\n    return function(dispatch) {\n        const deleteBookRequest = `http://localhost:3001/book/delete/${id}`;\n        fetch(deleteBookRequest, {\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            method: 'delete'\n        }).then((deleteBook) => {\n            dispatch({type:'deleteBook', payload:id})\n        })\n }\n}\n\n\nexport  function  deleteAuthor(id) {\n    return function(dispatch) {\n        const deleteBookRequest = `http://localhost:3001/author/delete/${id}`;\n        fetch(deleteBookRequest, {\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            method: 'delete'\n        }).then((deleteAuthor) => {\n            dispatch({type:'deleteAuthor', payload:id})\n        })\n }\n}\nexport  function updateAuthor(id, newauthordata) {\n    return function(dispatch) {\n        const insertAuthorRequest = `http://localhost:3001/author/update/${id}`;\n        fetch(insertAuthorRequest, {\n          headers: {\n            Accept: 'application/json, text/plain, */*',\n            'Content-Type': 'application/json',\n          },\n          method: 'put',\n          body: JSON.stringify(newauthordata),\n        }).then((updateAuthor) => {\n            dispatch({type:'updateAuthor', payload:newauthordata})\n        })\n }\n}\n\nexport  function updateBook(id, newBookData){\n    return function(dispatch) {\n        const bookRequest = `http://localhost:3001/book/update/${id}`;\n        fetch(bookRequest, {\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n                'Content-Type': 'application/json',\n            },\n            method: 'put',\n            body: JSON.stringify(newBookData),\n        }).then((updateBook) => {\n            dispatch({type:'updateBook', payload:newBookData})\n        })\n}\n}\n"]},"metadata":{},"sourceType":"module"}