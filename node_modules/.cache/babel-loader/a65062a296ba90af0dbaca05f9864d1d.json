{"ast":null,"code":"import _objectSpread from \"/home/ethen/Desktop/09-neeraj-vashistha-redux-project/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport default function library(state = {\n  authors: [],\n  books: []\n}, action) {\n  switch (action.type) {\n    case \"changeAuthors\":\n      {\n        state = _objectSpread({}, state, {\n          authors: action.payload\n        });\n        break;\n      }\n\n    case 'changeBooks':\n      {\n        state = _objectSpread({}, state, {\n          books: action.payload\n        });\n        break;\n      }\n\n    case 'deleteBook':\n      {\n        const currentBooks = JSON.parse(JSON.stringify(state.books));\n        const newbooks = currentBooks.filter((book, x) => {\n          return book.id !== action.payload;\n        });\n        state = _objectSpread({}, state, {\n          books: newbooks\n        });\n        break;\n      }\n\n    case 'deleteAuthor':\n      {\n        const currentAuthors = JSON.parse(JSON.stringify(state.authors));\n        const newAuthors = currentAuthors.filter((author, x) => {\n          return author.authorId !== action.payload;\n        });\n        state = _objectSpread({}, state, {\n          authors: newAuthors\n        });\n        break;\n      }\n\n    case 'addAuthor':\n      {\n        const currentAuthors = JSON.parse(JSON.stringify(state.authors));\n        currentAuthors.push(JSON.parse(action.payload));\n        state = _objectSpread({}, state, {\n          authors: currentAuthors\n        });\n        break;\n      }\n\n    case 'addBook':\n      {\n        const currentBooks = JSON.parse(JSON.stringify(state.books));\n        currentBooks.push(JSON.parse(action.payload));\n        state = _objectSpread({}, state, {\n          books: currentBooks\n        });\n        break;\n      }\n\n    case 'updateBook':\n      {\n        const newBook = action.payload;\n        const currentBooks = JSON.parse(JSON.stringify(state.books));\n        currentBooks.forEach((book, index) => {\n          if (book.id === newBook.id) {\n            currentBooks[index] = newBook;\n          }\n        });\n        state = _objectSpread({}, state, {\n          books: currentBooks\n        });\n        break;\n      }\n\n    case 'updateAuthor':\n      {\n        const newAuthor = action.payload;\n        const currentAuthors = JSON.parse(JSON.stringify(state.authors));\n        currentAuthors.forEach((author, index) => {\n          if (author.authorId === newAuthor.authorId) {\n            currentAuthors[index] = newAuthor;\n          }\n        });\n        state = _objectSpread({}, state, {\n          authors: currentAuthors\n        });\n        break;\n      }\n\n    default:\n      {}\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/ethen/Desktop/09-neeraj-vashistha-redux-project/src/reducers/library.js"],"names":["library","state","authors","books","action","type","payload","currentBooks","JSON","parse","stringify","newbooks","filter","book","x","id","currentAuthors","newAuthors","author","authorId","push","newBook","forEach","index","newAuthor"],"mappings":"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","sourcesContent":["export default function library(state ={authors:[], books:[]}, action) {\n    switch(action.type) {\n        case \"changeAuthors\": {\n            state = {...state, authors:action.payload}\n            break;\n        }\n        case 'changeBooks': {\n            state = {...state , books:action.payload}\n            break;\n        }\n        case 'deleteBook': {\n\n            const currentBooks =  JSON.parse(JSON.stringify(state.books))\n            const newbooks = currentBooks.filter((book, x) => {\n                return book.id !== action.payload\n                });\n            state = {...state , books:newbooks}\n            break;\n        }\n        case 'deleteAuthor': {\n            const currentAuthors =  JSON.parse(JSON.stringify(state.authors))\n            const newAuthors = currentAuthors.filter((author, x) => {\n                return author.authorId !== action.payload\n            });\n            state = {...state, authors:newAuthors}\n            break;\n        }\n        case 'addAuthor': {\n            const currentAuthors =  JSON.parse(JSON.stringify(state.authors))\n            currentAuthors.push(JSON.parse(action.payload));\n            state = {...state, authors:currentAuthors}\n            break;\n        }\n        case 'addBook' : {\n            const currentBooks =  JSON.parse(JSON.stringify(state.books))\n            currentBooks.push(JSON.parse(action.payload));\n            state = {...state , books:currentBooks}\n            break;\n        }\n        case 'updateBook' : {\n            const newBook = action.payload;\n            const currentBooks =  JSON.parse(JSON.stringify(state.books))\n            currentBooks.forEach((book, index) =>{\n                if (book.id === newBook.id) {\n                  currentBooks[index] = newBook;\n                }\n              })\n            state = {...state, books:currentBooks} \n            break;\n        }\n        case 'updateAuthor' : {\n            const newAuthor = action.payload\n            const currentAuthors =  JSON.parse(JSON.stringify(state.authors))\n            currentAuthors.forEach((author, index) =>{\n                if (author.authorId === newAuthor.authorId) {\n                  currentAuthors[index] =newAuthor;\n                }\n              })\n            state = {...state, authors:currentAuthors}  \n            break;\n        }\n        default : {\n            \n        }\n    }\n    return state;\n}"]},"metadata":{},"sourceType":"module"}