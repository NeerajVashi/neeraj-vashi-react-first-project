{"ast":null,"code":"import { async } from \"q\";\nexport function showAuthors() {\n  return function (dispatch) {\n    const myRequest = 'http://localhost:3001/author';\n    fetch(myRequest).then(response => response.json()).then(allAuthor => {\n      dispatch({\n        type: 'changeAuthors',\n        payload: allAuthor\n      });\n    });\n  };\n}\nexport function showBooks() {\n  return function (dispatch) {\n    const myRequest = 'http://localhost:3001/book';\n    fetch(myRequest).then(response => response.json()).then(allBooks => {\n      dispatch({\n        type: 'changeBooks',\n        payload: allBooks\n      });\n    });\n  };\n}\nexport async function addBooks(newBook, currentBooks) {\n  const insertBookRequest = 'http://localhost:3001/book/insert';\n  await fetch(insertBookRequest, {\n    headers: {\n      Accept: 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    },\n    method: 'post',\n    body: newBook\n  });\n  currentBooks.push(newBook);\n  return currentBooks;\n}\nexport async function addAuthors(newAuthor, currentAuthors) {\n  const insertAuthorRequest = 'http://localhost:3001/author/insert';\n  await fetch(insertAuthorRequest, {\n    headers: {\n      Accept: 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    },\n    method: 'post',\n    body: newAuthor\n  });\n  currentAuthors.push(newAuthor);\n  return currentAuthors;\n}\nexport async function deleteBook(id, books) {\n  const deleteBookRequest = \"http://localhost:3001/book/delete/\".concat(id);\n  await fetch(deleteBookRequest, {\n    headers: {\n      Accept: 'application/json, text/plain, */*',\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    method: 'delete'\n  });\n  const newbooks = await books.filter((book, x) => {\n    return book.id !== id;\n  });\n  return newbooks;\n}\nexport async function deleteAuthor(id, authors) {\n  const deleteAuthorRequest = \"http://localhost:3001/author/delete/\".concat(id);\n  await fetch(deleteAuthorRequest, {\n    headers: {\n      Accept: 'application/json, text/plain, */*',\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    method: 'delete'\n  });\n  const newAuthors = await authors.filter((author, x) => {\n    return author.authorId !== id;\n  });\n  return newAuthors;\n}\nexport async function updateAuthor(id, newauthordata) {\n  const insertAuthorRequest = \"http://localhost:3001/author/update/\".concat(id);\n  await fetch(insertAuthorRequest, {\n    headers: {\n      Accept: 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    },\n    method: 'put',\n    body: JSON.stringify(newauthordata)\n  });\n  return true;\n}\nexport async function updateBook(id, newbookData, currentBooks) {\n  const bookRequest = \"http://localhost:3001/book/update/\".concat(id);\n  await fetch(bookRequest, {\n    headers: {\n      Accept: 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    },\n    method: 'put',\n    body: JSON.stringify(newbookData)\n  });\n  await currentBooks.forEach((book, index) => {\n    if (book.id === id) {\n      currentBooks[index] = newbookData;\n    }\n  });\n  return currentBooks;\n} // export async function registerNewUser(newUser) {\n//     const registerRequest = 'http://localhost:3002/register';\n//     await fetch(registerRequest, {\n//         headers: {\n//             Accept:'application/json',\n//             'Content-type': 'application/json',\n//         },\n//         method:'post',\n//         body: JSON.stringify(newUser),\n//     })\n// }","map":{"version":3,"sources":["/home/ethen/Desktop/09-neeraj-vashistha-redux-project/src/actions/libraryAction.js"],"names":["async","showAuthors","dispatch","myRequest","fetch","then","response","json","allAuthor","type","payload","showBooks","allBooks","addBooks","newBook","currentBooks","insertBookRequest","headers","Accept","method","body","push","addAuthors","newAuthor","currentAuthors","insertAuthorRequest","deleteBook","id","books","deleteBookRequest","newbooks","filter","book","x","deleteAuthor","authors","deleteAuthorRequest","newAuthors","author","authorId","updateAuthor","newauthordata","JSON","stringify","updateBook","newbookData","bookRequest","forEach","index"],"mappings":"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","sourcesContent":["import { async } from \"q\";\n\nexport  function showAuthors() {\n    return function(dispatch) {\n        const myRequest = 'http://localhost:3001/author';\n        fetch(myRequest).then(response => response.json())\n            .then((allAuthor) => {\n                dispatch({type:'changeAuthors', payload:allAuthor})\n            })\n }\n}\nexport function showBooks() {\n    return function(dispatch) {\n        const myRequest = 'http://localhost:3001/book';\n        fetch(myRequest).then(response => response.json())\n            .then((allBooks) => {\n                dispatch({type:'changeBooks', payload:allBooks})\n            })\n }\n}\nexport async function addBooks(newBook, currentBooks) {\n    const insertBookRequest = 'http://localhost:3001/book/insert';\n    await fetch(insertBookRequest, {\n      headers: {\n        Accept: 'application/json, text/plain, */*',\n        'Content-Type': 'application/json',\n      },\n      method: 'post',\n      body: newBook,\n    })\n    currentBooks.push(newBook);\n    return currentBooks;\n}\n\nexport async function addAuthors(newAuthor, currentAuthors) {\n    const insertAuthorRequest = 'http://localhost:3001/author/insert';\n    await fetch(insertAuthorRequest, {\n      headers: {\n        Accept: 'application/json, text/plain, */*',\n        'Content-Type': 'application/json',\n      },\n      method: 'post',\n      body: newAuthor,\n    })\n    currentAuthors.push(newAuthor);\n    return currentAuthors;\n}\n\nexport async function deleteBook(id, books) {\n    const deleteBookRequest = `http://localhost:3001/book/delete/${id}`;\n    await fetch(deleteBookRequest, {\n        headers: {\n            Accept: 'application/json, text/plain, */*',\n            'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        method: 'delete'\n    })\n    const newbooks = await books.filter((book, x) => {\n        return book.id !== id\n        });\n    return newbooks\n    }\nexport async function deleteAuthor(id, authors) {\n    const deleteAuthorRequest = `http://localhost:3001/author/delete/${id}`;\n    await fetch(deleteAuthorRequest, {\n        headers: {\n            Accept: 'application/json, text/plain, */*',\n            'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        method: 'delete'\n    })\n    const newAuthors = await authors.filter((author, x) => {\n        return author.authorId !== id\n    });\n    return  newAuthors\n}\n \nexport async function updateAuthor(id, newauthordata) {\n    const insertAuthorRequest = `http://localhost:3001/author/update/${id}`;\n    await fetch(insertAuthorRequest, {\n      headers: {\n        Accept: 'application/json, text/plain, */*',\n        'Content-Type': 'application/json',\n      },\n      method: 'put',\n      body: JSON.stringify(newauthordata),\n    })\n    return true\n}\n\nexport async function updateBook(id, newbookData, currentBooks) {\n    const bookRequest = `http://localhost:3001/book/update/${id}`;\n    await fetch(bookRequest, {\n        headers: {\n            Accept: 'application/json, text/plain, */*',\n            'Content-Type': 'application/json',\n        },\n        method: 'put',\n        body: JSON.stringify(newbookData),\n    })\n    await currentBooks.forEach((book, index) =>{\n        if (book.id === id) {\n          currentBooks[index] = newbookData ;\n        }\n      })\n    return currentBooks\n}\n\n// export async function registerNewUser(newUser) {\n//     const registerRequest = 'http://localhost:3002/register';\n//     await fetch(registerRequest, {\n//         headers: {\n//             Accept:'application/json',\n//             'Content-type': 'application/json',\n//         },\n//         method:'post',\n//         body: JSON.stringify(newUser),\n//     })\n// }"]},"metadata":{},"sourceType":"module"}